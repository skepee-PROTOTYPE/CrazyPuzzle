{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MARCE\\\\source\\\\repos\\\\CrazyPuzzle\\\\web\\\\src\\\\PuzzleBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { db } from './firebase';\nimport { collection, addDoc } from 'firebase/firestore';\nimport styles from './PuzzleBoard.module.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PuzzleBoard({\n  difficulty,\n  layout,\n  user,\n  onScore,\n  onComplete\n}) {\n  _s();\n  // normalize grid sizes to even totals (pairs) to avoid missing tiles\n  const gridSizes = {\n    easy: 4,\n    medium: 6,\n    hard: 8\n  };\n  // use the mapping (fallback to 4)\n  const gridSize = gridSizes[difficulty] || 4;\n  const difficultyClass = (difficulty || 'easy').toLowerCase(); // 'easy' | 'medium' | 'hard'\n  const totalTiles = gridSize * gridSize;\n  const [tiles, setTiles] = useState([]);\n  const [flippedTiles, setFlippedTiles] = useState([]);\n  const [matchedTiles, setMatchedTiles] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  // Check if current layout is implemented\n  const isLayoutImplemented = layout === 'grid';\n\n  // Initialize game\n  useEffect(() => {\n    if (!isLayoutImplemented) return;\n\n    // ensure totalTiles is even (pairs). If odd, reduce by 1 to make it even\n    const safeTotal = totalTiles % 2 === 0 ? totalTiles : totalTiles - 1;\n    const pairCount = safeTotal / 2;\n    const numbers = Array.from({\n      length: pairCount\n    }, (_, i) => i + 1);\n    const shuffledTiles = [...numbers, ...numbers].sort(() => Math.random() - 0.5);\n\n    // if grid has an extra cell (odd), fill with a placeholder (0) â€” though mapping above uses even totals\n    if (shuffledTiles.length < totalTiles) shuffledTiles.push(0);\n    setTiles(shuffledTiles);\n    setFlippedTiles([]);\n    setMatchedTiles([]);\n    setMoves(0);\n    setTimer(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n  }, [difficulty, layout, totalTiles, isLayoutImplemented]);\n\n  // Timer effect\n  useEffect(() => {\n    if (gameStarted && !gameCompleted && isLayoutImplemented) {\n      const interval = setInterval(() => setTimer(prev => prev + 1), 1000);\n      return () => clearInterval(interval);\n    }\n  }, [gameStarted, gameCompleted, isLayoutImplemented]);\n\n  // Check for matches\n  useEffect(() => {\n    if (!isLayoutImplemented) return;\n    if (flippedTiles.length === 2) {\n      const [first, second] = flippedTiles;\n      if (tiles[first] === tiles[second]) {\n        setMatchedTiles(prev => [...prev, first, second]);\n        setFlippedTiles([]);\n      } else {\n        setTimeout(() => setFlippedTiles([]), 1000);\n      }\n    }\n  }, [flippedTiles, tiles, isLayoutImplemented]);\n  const saveScore = useCallback(async (score, time) => {\n    if (!user) return;\n    try {\n      await addDoc(collection(db, 'scores'), {\n        userId: user.uid,\n        userName: user.displayName || 'Anonymous',\n        score,\n        time,\n        difficulty,\n        layout,\n        createdAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [user, difficulty, layout]);\n\n  // Check game completion\n  useEffect(() => {\n    if (!isLayoutImplemented) return;\n    if (matchedTiles.length === totalTiles && totalTiles > 0) {\n      setGameCompleted(true);\n      const score = Math.max(1000 - moves * 10 - timer, 100);\n      if (user && onScore) {\n        onScore(score, timer);\n        saveScore(score, timer);\n      }\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [matchedTiles.length, totalTiles, moves, timer, user, onScore, onComplete, saveScore, isLayoutImplemented]);\n  const handleTileClick = index => {\n    if (!isLayoutImplemented) return;\n    if (!gameStarted) setGameStarted(true);\n    if (flippedTiles.length === 2 || flippedTiles.includes(index) || matchedTiles.includes(index)) {\n      return;\n    }\n    setFlippedTiles(prev => [...prev, index]);\n    setMoves(prev => prev + 1);\n  };\n  const resetGame = () => {\n    if (!isLayoutImplemented) return;\n    const numbers = Array.from({\n      length: totalTiles / 2\n    }, (_, i) => i + 1);\n    const shuffledTiles = [...numbers, ...numbers].sort(() => Math.random() - 0.5);\n    setTiles(shuffledTiles);\n    setFlippedTiles([]);\n    setMatchedTiles([]);\n    setMoves(0);\n    setTimer(0);\n    setGameStarted(false);\n    setGameCompleted(false);\n  };\n\n  // Inline CSS variable for SCSS --grid-size\n  const gridStyle = {\n    ['--grid-size']: gridSize\n  };\n  console.log('Grid classes:', styles.puzzleGrid, styles[difficultyClass]); // debug mapped class names\n  // Also log actual DOM classes after render if needed\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.boardCard,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.boardTitle,\n      children: [\"Puzzle Board - \", difficulty.charAt(0).toUpperCase() + difficulty.slice(1), \" (\", gridSize, \"x\", gridSize, \") - \", layout.charAt(0).toUpperCase() + layout.slice(1), \" Layout\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), !isLayoutImplemented ?\n    /*#__PURE__*/\n    // Show \"Coming Soon\" message for unimplemented layouts\n    _jsxDEV(\"div\", {\n      className: styles.comingSoon,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.comingSoonIcon,\n        children: \"\\uD83D\\uDEA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: styles.comingSoonTitle,\n        children: \"Coming Soon!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.comingSoonText,\n        children: [\"The \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: layout.charAt(0).toUpperCase() + layout.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), \" layout is under development.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.comingSoonSubtext,\n        children: [\"Please select \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 27\n        }, this), \" layout to play the game.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Show the actual game for implemented layouts (grid)\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        // apply both module classes: puzzleGrid + difficulty (module lookup ensures hashed name)\n        className: `${styles.puzzleGrid} ${styles[difficultyClass] || ''}`,\n        style: gridStyle,\n        role: \"grid\",\n        \"aria-label\": `Puzzle grid ${difficulty}`,\n        children: tiles.map((tile, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.tile,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.tileInner,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.tileFront\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.tileBack,\n              children: tile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Moves: \", moves, \" | Time: \", timer, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: styles.btn,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.congratsMsg,\n        children: [\"\\uD83C\\uDF89 Congratulations! You completed the puzzle in \", moves, \" moves and \", timer, \" seconds!\", user ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Score: \", Math.max(1000 - moves * 10 - timer, 100), \" (Saved to leaderboard!)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Score: \", Math.max(1000 - moves * 10 - timer, 100)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.guestHint,\n            children: \"\\uD83D\\uDCA1 Sign in with Google to save your high scores to the leaderboard!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(PuzzleBoard, \"74Ev5ag2eLFnbWmT95fMuDawbUw=\");\n_c = PuzzleBoard;\nexport default PuzzleBoard;\nvar _c;\n$RefreshReg$(_c, \"PuzzleBoard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","db","collection","addDoc","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","PuzzleBoard","difficulty","layout","user","onScore","onComplete","_s","gridSizes","easy","medium","hard","gridSize","difficultyClass","toLowerCase","totalTiles","tiles","setTiles","flippedTiles","setFlippedTiles","matchedTiles","setMatchedTiles","moves","setMoves","timer","setTimer","gameStarted","setGameStarted","gameCompleted","setGameCompleted","isLayoutImplemented","safeTotal","pairCount","numbers","Array","from","length","_","i","shuffledTiles","sort","Math","random","push","interval","setInterval","prev","clearInterval","first","second","setTimeout","saveScore","score","time","userId","uid","userName","displayName","createdAt","Date","error","console","max","handleTileClick","index","includes","resetGame","gridStyle","log","puzzleGrid","className","boardCard","children","boardTitle","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","comingSoon","comingSoonIcon","comingSoonTitle","comingSoonText","comingSoonSubtext","style","role","map","tile","tileInner","tileFront","tileBack","textAlign","marginTop","onClick","btn","congratsMsg","guestHint","_c","$RefreshReg$"],"sources":["C:/Users/MARCE/source/repos/CrazyPuzzle/web/src/PuzzleBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { User } from 'firebase/auth';\r\nimport { db } from './firebase';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\nimport styles from './PuzzleBoard.module.scss';\r\n\r\ninterface PuzzleBoardProps {\r\n  difficulty: 'easy' | 'medium' | 'hard' | string;\r\n  layout: string;\r\n  user?: User | null;\r\n  onScore?: (score: number, timer: number) => void;\r\n  onComplete?: () => void;\r\n}\r\n\r\nfunction PuzzleBoard({ difficulty, layout, user, onScore, onComplete }: PuzzleBoardProps) {\r\n  // normalize grid sizes to even totals (pairs) to avoid missing tiles\r\n  const gridSizes: Record<'easy' | 'medium' | 'hard', number> = { easy: 4, medium: 6, hard: 8 };\r\n  // use the mapping (fallback to 4)\r\n  const gridSize = (gridSizes[(difficulty as 'easy' | 'medium' | 'hard')] || 4);\r\n  const difficultyClass = (difficulty || 'easy').toLowerCase(); // 'easy' | 'medium' | 'hard'\r\n  const totalTiles = gridSize * gridSize;\r\n  \r\n  const [tiles, setTiles] = useState<number[]>([]);\r\n  const [flippedTiles, setFlippedTiles] = useState<number[]>([]);\r\n  const [matchedTiles, setMatchedTiles] = useState<number[]>([]);\r\n  const [moves, setMoves] = useState(0);\r\n  const [timer, setTimer] = useState(0);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gameCompleted, setGameCompleted] = useState(false);\r\n\r\n  // Check if current layout is implemented\r\n  const isLayoutImplemented = layout === 'grid';\r\n\r\n  // Initialize game\r\n  useEffect(() => {\r\n    if (!isLayoutImplemented) return;\r\n    \r\n    // ensure totalTiles is even (pairs). If odd, reduce by 1 to make it even\r\n    const safeTotal = totalTiles % 2 === 0 ? totalTiles : totalTiles - 1;\r\n    const pairCount = safeTotal / 2;\r\n    const numbers = Array.from({ length: pairCount }, (_, i) => i + 1);\r\n    const shuffledTiles = [...numbers, ...numbers].sort(() => Math.random() - 0.5);\r\n\r\n    // if grid has an extra cell (odd), fill with a placeholder (0) â€” though mapping above uses even totals\r\n    if (shuffledTiles.length < totalTiles) shuffledTiles.push(0);\r\n\r\n    setTiles(shuffledTiles);\r\n    setFlippedTiles([]);\r\n    setMatchedTiles([]);\r\n    setMoves(0);\r\n    setTimer(0);\r\n    setGameStarted(false);\r\n    setGameCompleted(false);\r\n  }, [difficulty, layout, totalTiles, isLayoutImplemented]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    if (gameStarted && !gameCompleted && isLayoutImplemented) {\r\n      const interval = setInterval(() => setTimer(prev => prev + 1), 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameStarted, gameCompleted, isLayoutImplemented]);\r\n\r\n  // Check for matches\r\n  useEffect(() => {\r\n    if (!isLayoutImplemented) return;\r\n    \r\n    if (flippedTiles.length === 2) {\r\n      const [first, second] = flippedTiles;\r\n      if (tiles[first] === tiles[second]) {\r\n        setMatchedTiles(prev => [...prev, first, second]);\r\n        setFlippedTiles([]);\r\n      } else {\r\n        setTimeout(() => setFlippedTiles([]), 1000);\r\n      }\r\n    }\r\n  }, [flippedTiles, tiles, isLayoutImplemented]);\r\n\r\n  const saveScore = useCallback(async (score: number, time: number) => {\r\n    if (!user) return;\r\n    \r\n    try {\r\n      await addDoc(collection(db, 'scores'), {\r\n        userId: user.uid,\r\n        userName: user.displayName || 'Anonymous',\r\n        score,\r\n        time,\r\n        difficulty,\r\n        layout,\r\n        createdAt: new Date()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving score:', error);\r\n    }\r\n  }, [user, difficulty, layout]);\r\n\r\n  // Check game completion\r\n  useEffect(() => {\r\n    if (!isLayoutImplemented) return;\r\n    \r\n    if (matchedTiles.length === totalTiles && totalTiles > 0) {\r\n      setGameCompleted(true);\r\n      const score = Math.max(1000 - moves * 10 - timer, 100);\r\n      \r\n      if (user && onScore) {\r\n        onScore(score, timer);\r\n        saveScore(score, timer);\r\n      }\r\n      \r\n      if (onComplete) {\r\n        onComplete();\r\n      }\r\n    }\r\n  }, [matchedTiles.length, totalTiles, moves, timer, user, onScore, onComplete, saveScore, isLayoutImplemented]);\r\n\r\n  const handleTileClick = (index: number) => {\r\n    if (!isLayoutImplemented) return;\r\n    \r\n    if (!gameStarted) setGameStarted(true);\r\n    \r\n    if (flippedTiles.length === 2 || flippedTiles.includes(index) || matchedTiles.includes(index)) {\r\n      return;\r\n    }\r\n\r\n    setFlippedTiles(prev => [...prev, index]);\r\n    setMoves(prev => prev + 1);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    if (!isLayoutImplemented) return;\r\n    \r\n    const numbers = Array.from({ length: totalTiles / 2 }, (_, i) => i + 1);\r\n    const shuffledTiles = [...numbers, ...numbers].sort(() => Math.random() - 0.5);\r\n    setTiles(shuffledTiles);\r\n    setFlippedTiles([]);\r\n    setMatchedTiles([]);\r\n    setMoves(0);\r\n    setTimer(0);\r\n    setGameStarted(false);\r\n    setGameCompleted(false);\r\n  };\r\n\r\n  // Inline CSS variable for SCSS --grid-size\r\n  const gridStyle: React.CSSProperties = {\r\n    ['--grid-size' as any]: gridSize\r\n  };\r\n\r\n  console.log('Grid classes:', styles.puzzleGrid, styles[difficultyClass]); // debug mapped class names\r\n  // Also log actual DOM classes after render if needed\r\n\r\n  return (\r\n    <div className={styles.boardCard}>\r\n      <h3 className={styles.boardTitle}>\r\n        Puzzle Board - {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} ({gridSize}x{gridSize}) - {layout.charAt(0).toUpperCase() + layout.slice(1)} Layout\r\n      </h3>\r\n      \r\n      {!isLayoutImplemented ? (\r\n        // Show \"Coming Soon\" message for unimplemented layouts\r\n        <div className={styles.comingSoon}>\r\n          <div className={styles.comingSoonIcon}>ðŸš§</div>\r\n          <h4 className={styles.comingSoonTitle}>Coming Soon!</h4>\r\n          <p className={styles.comingSoonText}>\r\n            The <strong>{layout.charAt(0).toUpperCase() + layout.slice(1)}</strong> layout is under development.\r\n          </p>\r\n          <p className={styles.comingSoonSubtext}>\r\n            Please select <strong>Grid</strong> layout to play the game.\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        // Show the actual game for implemented layouts (grid)\r\n        <>\r\n          <div\r\n            // apply both module classes: puzzleGrid + difficulty (module lookup ensures hashed name)\r\n            className={`${styles.puzzleGrid} ${styles[difficultyClass] || ''}`}\r\n            style={gridStyle}\r\n            role=\"grid\"\r\n            aria-label={`Puzzle grid ${difficulty}`}\r\n          >\r\n            {tiles.map((tile, i) => (\r\n              <div key={i} className={styles.tile}>\r\n                <div className={styles.tileInner}>\r\n                  <div className={styles.tileFront}></div>\r\n                  <div className={styles.tileBack}>{tile}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ textAlign: 'center', marginTop: '20px' }}>\r\n            <p>Moves: {moves} | Time: {timer}s</p>\r\n            <button onClick={resetGame} className={styles.btn}>New Game</button>\r\n          </div>\r\n\r\n          {gameCompleted && (\r\n            <div className={styles.congratsMsg}>\r\n              ðŸŽ‰ Congratulations! You completed the puzzle in {moves} moves and {timer} seconds!\r\n              {user ? (\r\n                <p>Score: {Math.max(1000 - moves * 10 - timer, 100)} (Saved to leaderboard!)</p>\r\n              ) : (\r\n                <div>\r\n                  <p>Score: {Math.max(1000 - moves * 10 - timer, 100)}</p>\r\n                  <p className={styles.guestHint}>\r\n                    ðŸ’¡ Sign in with Google to save your high scores to the leaderboard!\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PuzzleBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}