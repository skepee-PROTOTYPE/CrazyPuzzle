{"ast":null,"code":"import _objectSpread from\"C:/Users/MARCE/source/repos/CrazyPuzzle/web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState}from'react';import{db}from'./firebase';import{collection,query,where,orderBy,limit,getDocs}from'firebase/firestore';import styles from'./Leaderboard.module.scss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Leaderboard(_ref){let{difficulty,layout,score,timer}=_ref;const[leaderboard,setLeaderboard]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');useEffect(()=>{const fetchLeaderboard=async()=>{try{setLoading(true);setError('');console.log('Fetching leaderboard for:',{difficulty,layout});// Only try the complex query for grid layout (which works)\nif(layout==='grid'){const scoresRef=collection(db,'scores');const q=query(scoresRef,where('difficulty','==',difficulty),where('layout','==',layout),orderBy('score','desc'),limit(10));const querySnapshot=await getDocs(q);const scores=querySnapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data()));setLeaderboard(scores);}else{// For non-grid layouts, show empty leaderboard since they're not implemented\nsetLeaderboard([]);}}catch(error){console.error('Error fetching leaderboard:',error);setError('Unable to load leaderboard. This may be due to missing database indexes.');// Fallback: try to get some scores without complex filtering\ntry{const scoresRef=collection(db,'scores');const simpleQuery=query(scoresRef,limit(5));const snapshot=await getDocs(simpleQuery);const allScores=snapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data())).filter(scoreItem=>scoreItem.difficulty===difficulty&&scoreItem.layout===layout).sort((a,b)=>b.score-a.score).slice(0,10);setLeaderboard(allScores);setError('');// Clear error if fallback works\n}catch(fallbackError){console.error('Fallback query failed:',fallbackError);setLeaderboard([]);}}finally{setLoading(false);}};fetchLeaderboard();},[difficulty,layout,score,timer]);if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:styles.leaderboardCard,children:[/*#__PURE__*/_jsx(\"h3\",{className:styles.leaderboardTitle,children:\"Leaderboard\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.noScores,children:\"Loading leaderboard...\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:styles.leaderboardCard,children:[/*#__PURE__*/_jsxs(\"h3\",{className:styles.leaderboardTitle,children:[\"Leaderboard - \",difficulty.charAt(0).toUpperCase()+difficulty.slice(1),\" (\",layout,\")\"]}),error&&/*#__PURE__*/_jsxs(\"div\",{style:{background:'#fff3cd',color:'#856404',padding:'10px',borderRadius:'4px',marginBottom:'15px',fontSize:'0.9rem'},children:[\"\\u26A0\\uFE0F \",error]}),layout!=='grid'?/*#__PURE__*/_jsxs(\"div\",{className:styles.noScores,children:[\"Leaderboard will be available when \",/*#__PURE__*/_jsx(\"strong\",{children:layout}),\" layout is implemented.\"]}):leaderboard.length>0?/*#__PURE__*/_jsxs(\"table\",{className:styles.leaderboardTable,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:styles.rank,children:\"Rank\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Player\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Time\"}),/*#__PURE__*/_jsx(\"th\",{className:styles.score,children:\"Score\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:leaderboard.map((entry,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:styles.rank,children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:entry.userName}),/*#__PURE__*/_jsxs(\"td\",{children:[entry.time,\"s\"]}),/*#__PURE__*/_jsx(\"td\",{className:styles.score,children:entry.score})]},entry.id))})]}):/*#__PURE__*/_jsx(\"div\",{className:styles.noScores,children:\"No scores yet for this difficulty and layout. Be the first to play!\"})]});}export default Leaderboard;","map":{"version":3,"names":["React","useEffect","useState","db","collection","query","where","orderBy","limit","getDocs","styles","jsx","_jsx","jsxs","_jsxs","Leaderboard","_ref","difficulty","layout","score","timer","leaderboard","setLeaderboard","loading","setLoading","error","setError","fetchLeaderboard","console","log","scoresRef","q","querySnapshot","scores","docs","map","doc","_objectSpread","id","data","simpleQuery","snapshot","allScores","filter","scoreItem","sort","a","b","slice","fallbackError","className","leaderboardCard","children","leaderboardTitle","noScores","charAt","toUpperCase","style","background","color","padding","borderRadius","marginBottom","fontSize","length","leaderboardTable","rank","entry","index","userName","time"],"sources":["C:/Users/MARCE/source/repos/CrazyPuzzle/web/src/Leaderboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { db } from './firebase';\r\nimport { collection, query, where, orderBy, limit, getDocs } from 'firebase/firestore';\r\nimport styles from './Leaderboard.module.scss';\r\n\r\ninterface LeaderboardProps {\r\n  difficulty: string;\r\n  layout: string;\r\n  score: number;\r\n  timer: number;\r\n}\r\n\r\ninterface Score {\r\n  id: string;\r\n  userName: string;\r\n  score: number;\r\n  time: number;\r\n  difficulty: string;\r\n  layout: string;\r\n  createdAt: any;\r\n}\r\n\r\nfunction Leaderboard({ difficulty, layout, score, timer }: LeaderboardProps) {\r\n  const [leaderboard, setLeaderboard] = useState<Score[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    const fetchLeaderboard = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError('');\r\n        \r\n        console.log('Fetching leaderboard for:', { difficulty, layout });\r\n        \r\n        // Only try the complex query for grid layout (which works)\r\n        if (layout === 'grid') {\r\n          const scoresRef = collection(db, 'scores');\r\n          const q = query(\r\n            scoresRef,\r\n            where('difficulty', '==', difficulty),\r\n            where('layout', '==', layout),\r\n            orderBy('score', 'desc'),\r\n            limit(10)\r\n          );\r\n          \r\n          const querySnapshot = await getDocs(q);\r\n          const scores = querySnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            ...doc.data()\r\n          })) as Score[];\r\n          \r\n          setLeaderboard(scores);\r\n        } else {\r\n          // For non-grid layouts, show empty leaderboard since they're not implemented\r\n          setLeaderboard([]);\r\n        }\r\n        \r\n      } catch (error: any) {\r\n        console.error('Error fetching leaderboard:', error);\r\n        setError('Unable to load leaderboard. This may be due to missing database indexes.');\r\n        \r\n        // Fallback: try to get some scores without complex filtering\r\n        try {\r\n          const scoresRef = collection(db, 'scores');\r\n          const simpleQuery = query(scoresRef, limit(5));\r\n          const snapshot = await getDocs(simpleQuery);\r\n          \r\n          const allScores = snapshot.docs\r\n            .map(doc => ({ id: doc.id, ...doc.data() } as Score))\r\n            .filter(scoreItem => scoreItem.difficulty === difficulty && scoreItem.layout === layout)\r\n            .sort((a, b) => b.score - a.score)\r\n            .slice(0, 10);\r\n            \r\n          setLeaderboard(allScores);\r\n          setError(''); // Clear error if fallback works\r\n        } catch (fallbackError) {\r\n          console.error('Fallback query failed:', fallbackError);\r\n          setLeaderboard([]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchLeaderboard();\r\n  }, [difficulty, layout, score, timer]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={styles.leaderboardCard}>\r\n        <h3 className={styles.leaderboardTitle}>Leaderboard</h3>\r\n        <div className={styles.noScores}>Loading leaderboard...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.leaderboardCard}>\r\n      <h3 className={styles.leaderboardTitle}>\r\n        Leaderboard - {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} ({layout})\r\n      </h3>\r\n      \r\n      {error && (\r\n        <div style={{ \r\n          background: '#fff3cd', \r\n          color: '#856404', \r\n          padding: '10px', \r\n          borderRadius: '4px', \r\n          marginBottom: '15px',\r\n          fontSize: '0.9rem'\r\n        }}>\r\n          ⚠️ {error}\r\n        </div>\r\n      )}\r\n      \r\n      {layout !== 'grid' ? (\r\n        <div className={styles.noScores}>\r\n          Leaderboard will be available when <strong>{layout}</strong> layout is implemented.\r\n        </div>\r\n      ) : leaderboard.length > 0 ? (\r\n        <table className={styles.leaderboardTable}>\r\n          <thead>\r\n            <tr>\r\n              <th className={styles.rank}>Rank</th>\r\n              <th>Player</th>\r\n              <th>Time</th>\r\n              <th className={styles.score}>Score</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td className={styles.rank}>{index + 1}</td>\r\n                <td>{entry.userName}</td>\r\n                <td>{entry.time}s</td>\r\n                <td className={styles.score}>{entry.score}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <div className={styles.noScores}>\r\n          No scores yet for this difficulty and layout. Be the first to play!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Leaderboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}